<project name="ohcount4j" default="compile" basedir=".">
	<description>simple example build file</description>
	<property name="src" location="src/main/java"/>
	<property name="build" location="bin"/>
	<property name="test.build" location="test-output"/>
	<property name="dist"  location="dist"/>
	<property name="scanners" location="src/scanners/ragel"/>
	<property name="gen-src" location="gen-src" />
	<property name="scanner-package" value="com/blackducksoftware/ohcount4j/scan"/>
	<property name="lib" location="lib"/>
	<property name="coverage.dir" value="coverage" />

	<property name="tools.dir" value="/opt" />
	<!-- Emma distribution locations -->
	<property name="emma.dir" value="${lib}/emma/emma-2.1.5320" />
	<path id="emma.lib">
		<fileset dir="${emma.dir}" includes="*.jar" />
	</path>
	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />

	<path id="lib.jars">
		<fileset dir="${lib}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="run.classpath" >
		<pathelement location="${build}" />
	</path>

	<path id="test.lib.jars">
		<path refid="run.classpath"/>
		<path refid="lib.jars"/>
	</path>


	<target name="setup">
		<!-- Create the time stamp -->
		<tstamp/>
		<mkdir dir="${gen-src}/${scanner-package}"/>
		<mkdir dir="${build}"/>
		<mkdir dir="${test.build}"/>
		<mkdir dir="${coverage.dir}"/>
	</target>

	<target name="gen-src" depends="clean, setup">
		<apply executable="ragel" dest="${gen-src}/${scanner-package}" failonerror="true" parallel="false">
			<arg value="-J"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<fileset dir="${scanners}" includes="*.java.rl"/>
			<mapper type="glob" from="*.java.rl" to="*.java"/>
		</apply>
	</target>

	<target name="compile" depends="gen-src" description="compile the source" >
		<javac includeantruntime="false" destdir="${build}" debug="true" debuglevel="lines,vars,source">
			<classpath refid="lib.jars"/>
			<src path="${gen-src}"/>
			<src path="${src}"/>
		</javac>
	</target>

	<target name="compile-tests" depends="compile">
		<mkdir dir="testbin" />
		<javac includeantruntime="false" destdir="testbin" classpathref="test.lib.jars" debug="true" debuglevel="lines,vars,source" failonerror="true">
			<src path="src/test/java" />
			<exclude name="data/*"/>
		</javac>
	</target>

    <target name="run-tests-no-coverage" depends="compile-tests">
        <taskdef resource="testngtasks" classpathref="lib.jars" />
        <testng haltonfailure="false" outputdir="test-output" >
            <classpath>
                <pathelement location="${out.instr.dir}"/>
                <pathelement location="testbin"/>
                <path refid="test.lib.jars" />
            </classpath>
            <classfileset dir="testbin" includes="**/*Test.class" />

            <!-- reporter classname="org.testng.reporters.XMLReporter" /-->
        </testng>
    </target>

	<target name="run-tests" depends="emma, compile-tests">
		<emma enabled="${emma.enabled}" >
			<instr instrpathref="run.classpath"
             destdir="${out.instr.dir}"	
             metadatafile="${coverage.dir}/metadata.emma"
             merge="true"
      />
		</emma>
		<taskdef resource="testngtasks" classpathref="lib.jars" />
		<testng haltonfailure="false" outputdir="test-output" >
			<classpath>
				<pathelement location="${out.instr.dir}"/>
				<pathelement location="testbin"/>
				<path refid="test.lib.jars" />
				<path refid="emma.lib" />
			</classpath>
			<classfileset dir="testbin" includes="**/*Test.class" />
			<jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />

			<!-- reporter classname="org.testng.reporters.XMLReporter" /-->
		</testng>

		<emma enabled="${emma.enabled}" >
			<report>
				<sourcepath>
					<dirset dir=".">
						<include name="src" />
						<include name="src-gen" />
					</dirset>
				</sourcepath>

				<fileset dir="${coverage.dir}" >
					<include name="*.emma" />
				</fileset>

				<txt outfile="${coverage.dir}/coverage.txt" />
				<html outfile="${coverage.dir}/coverage.html" />
			</report>
		</emma>
	</target>

	<target name="dist" depends="compile" description="generate the distribution" >
		<!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
		<jar jarfile="${dist}/ohcount4j-${DSTAMP}.jar" basedir="${build}"/>
	</target>

	<target name="emma" description="turns on EMMA instrumentation/reporting" >
		<property name="emma.enabled" value="true" />
		<!-- EMMA instr class output directory: -->
		<property name="out.instr.dir" value="outinstr" />
		<mkdir dir="${out.instr.dir}" />
	</target>

	<target name="clean"
        description="clean up" >
		<delete dir="${build}"/>
		<delete dir="${test.build}"/>
		<delete dir="${testbin}"/>
		<delete dir="${dist}"/>
		<delete dir="${gen-src}"/>
		<delete dir="${coverage.dir}"/>
	</target>

	<target name="data">
		<copy todir="${build}/data">
			<fileset dir="test/data"/>
		</copy>
	</target>

	<target name="smoke" depends="compile,data" description="run a minimal C scanner smoke test">
		<java classname="com.blackducksoftware.ohcount4j.Ohcount" classpathref="lib.jars">
			<arg value="-a"/>
			<classpath>
				<pathelement location="${build}"/>
			</classpath>
		</java>
	</target>

</project>
